{"version":3,"file":"63eba335-d1cacaacc675c51bf929.js","mappings":"uPAUA,kLAkOA,IA7KMA,WACJ,OAEIC,EAAAA,EAAAA,gBAxDN,cAsDE,KACUC,EADV,eACwBC,EADxB,cACqCC,EADrC,aAIQC,GAAiBC,EAAAA,EAAAA,MAAzB,aAEMC,GAAaC,EAAAA,EAAAA,IAAW,GAAD,qCAA7B,KAMMC,EAAAA,SAAa,UACjB,cACEC,KAAKA,EAAAA,EAAAA,IAAF,cACaC,EAAAA,GAAAA,QAAAA,MADb,cAGHC,GAJF,EAKEC,UALF,UADiB,kBAAnB,EAYMC,EAAAA,SAAiB,YACrB,QAAC,WAAD,CAAkBC,QAAlB,SAEE,aAFF,MADqB,EAAvB,EAQMC,EAAAA,SAAmB,YAOvBC,GACE,0BACEC,MADF,EAEER,IAFF,EAMES,IAAKF,EANP,MAOMA,EARE,qBAPa,CAAzB,EAmBMG,EAAAA,SAAc,YAClB,eACEV,IADF,EAKES,IALF,EAMEE,IAPgB,GAApB,EAwGA,OACE,cAAcC,GAAd,WAA4BC,cAA5B,MACE,QAAC,WAAD,CACEb,KAAKA,EAAAA,EAAAA,IAAF,iBACgBC,EAAAA,GAAAA,QAAAA,OADhB,cAGHI,QAJF,MADF,aASE,cAAUS,UAAWnB,EAAAA,IAArB,aACGE,EAAAA,KAxGDkB,SAAa,GACjB,0BAAIC,EAAAA,WAA0C,CAC5C,IAAMC,EAAOD,EAAAA,YAAmBjB,EAAWiB,EAAAA,WAA3C,MACME,EAAQZ,EAAiBU,EAAD,MAAaA,EAA3C,YAEA,OACE,QAAC,UAAD,CACEhB,IADF,EAIEmB,IAAKH,EAJP,GAKEI,KALF,KAMEC,MAAMC,EAAAA,EAAAA,IAAWN,EANnB,OAQGE,GACC,cAAWV,MAAOQ,EAAlB,MAA8BE,MAA9B,EAA4CK,SADxC,IAGJnB,EAAeY,EAAD,MAZpB,GAkBF,4BAAIA,EAAAA,WAA2C,CAAC,IAAD,IACvCC,EAAOlB,EAAU,UAACiB,EAAD,8BAAcA,EAAd,+BAAcA,EAArC,MACMQ,EAAalB,EAAiBU,EAAD,MAAaA,EAAhD,YAEME,EADaF,EAAAA,OAAcN,EAAYM,EAAAA,MAAD,IAAiBA,EAA7D,QACA,EAEA,OACE,QAAC,UAAD,CACEhB,IADF,EAIEmB,IAAKH,EAJP,GAKEI,KALF,KAMEC,MAAMC,EAAAA,EAAAA,IAAWN,EANnB,OAQGE,GACC,cACEV,MAAOQ,EADT,MAEEE,MAFF,EAGEK,UACE,6CACmB,iBAAIP,EADvB,YACuC,aADvC,MALA,KAYJZ,EAAeY,EAAD,MArBpB,GA2BF,6BAAIA,EAAAA,WAA4C,CAAC,IAAD,YACxCR,EAAK,oBACTQ,EAAAA,UADS,uBACiBA,EAAAA,UADjB,4BACgDA,EAD3D,MAEMO,EAAQ,oBACZP,EAAAA,UADY,6BAEZA,EAAAA,UAFY,kCAGZA,EAAAA,UAHF,YAIMS,EAAK,oBACTT,EAAAA,UADS,uBAETA,EAAAA,UAFS,+BAGTA,EAAAA,UAHF,MAKMC,EAAOlB,EAAWiB,EAAxB,MAEA,OACE,QAAC,UAAD,CAAeG,IAAKH,EAApB,GAA6BI,KAA7B,KAAuCC,MAAMC,EAAAA,EAAAA,IAAWN,EAAxD,OACGR,GAAAA,GAAAA,GACC,cACEA,MADF,EAEEe,UACE,aAAMG,cAAN,YAHJ,GAQER,MAAOR,EAAYe,EATtBjB,KAYCJ,EAAeI,EAdrB,GAoBF,YA1FF,KA/DF,C","sources":["webpack://@teimurjan/landing/./src/components/organisms/media/Media.tsx"],"sourcesContent":["import { css } from '@emotion/react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { prettyDate, sortByDate, theme } from '@teimurjan/utils'\nimport { GraphCms_VideoEmbed, MediaQuery } from '@teimurjan/gql-types'\nimport { Link, ScrollToArea, Typography } from '../../atoms'\nimport { useAppContext } from '../../../context'\nimport { MediaCard, Timeline } from '../../molecules'\nimport Flex from '@react-css/flex'\nimport { Fragment, ReactNode } from 'react'\n\nconst query = graphql`\n  query Media {\n    gcms {\n      publications {\n        __typename\n        id\n        title\n        link\n        date\n        opengraph {\n          description\n          image\n          ogImage\n          ogDescription\n          ogTitle\n          ogType\n          ogUrl\n          twitterCard\n          twitterDescription\n          twitterImageSrc\n          twitterTitle\n          url\n        }\n      }\n      conferences {\n        __typename\n        id\n        title\n        topic\n        link\n        date\n        image {\n          url\n        }\n        videoEmbed {\n          link\n          iframeOptions\n        }\n      }\n      interviews {\n        __typename\n        id\n        title\n        date\n        videoEmbed {\n          link\n          iframeOptions\n        }\n      }\n    }\n  }\n`\n\nconst Media = () => {\n  const {\n    gcms: { publications, conferences, interviews },\n  } = useStaticQuery<MediaQuery>(query)\n\n  const { visitedLinks } = useAppContext()\n\n  const mediaItems = sortByDate([\n    ...publications,\n    ...conferences,\n    ...interviews,\n  ])\n\n  const renderLink = (link: string) => (\n    <Link\n      css={css`\n        margin-top: ${theme.spacing.small};\n      `}\n      to={link}\n      underline=\"always\"\n    >\n      Check it out 🔗\n    </Link>\n  )\n\n  const renderMinified = (text: string, link: ReactNode) => (\n    <Typography.Title variant=\"h5\">\n      {text}\n      <br />\n      {link}\n    </Typography.Title>\n  )\n\n  const renderVideoEmbed = (\n    title: string,\n    videoEmbed:\n      | Pick<GraphCms_VideoEmbed, 'link' | 'iframeOptions'>\n      | undefined\n      | null\n  ) =>\n    videoEmbed ? (\n      <iframe\n        title={title}\n        css={css`\n          display: block;\n          width: 100%;\n        `}\n        src={videoEmbed.link}\n        {...videoEmbed.iframeOptions}\n      />\n    ) : undefined\n\n  const renderImage = (src: string, title: string) => (\n    <img\n      css={css`\n        width: 100%;\n        display: block;\n      `}\n      src={src}\n      alt={title}\n    />\n  )\n\n  const renderItem = (item: typeof mediaItems[0]) => {\n    if (item.__typename === 'GraphCMS_Interview') {\n      const link = item.videoEmbed && renderLink(item.videoEmbed.link)\n      const media = renderVideoEmbed(item.title, item.videoEmbed)\n\n      return (\n        <Timeline.Item\n          css={css`\n            flex: 1;\n          `}\n          key={item.id}\n          icon=\"📺\"\n          date={prettyDate(item.date)}\n        >\n          {media ? (\n            <MediaCard title={item.title} media={media} subtitle={link} />\n          ) : (\n            renderMinified(item.title, link)\n          )}\n        </Timeline.Item>\n      )\n    }\n\n    if (item.__typename === 'GraphCMS_Conference') {\n      const link = renderLink(item.link ?? item.videoEmbed?.link)\n      const videoMedia = renderVideoEmbed(item.title, item.videoEmbed)\n      const imageMedia = item.image && renderImage(item.image.url, item.title)\n      const media = imageMedia || videoMedia\n\n      return (\n        <Timeline.Item\n          css={css`\n            flex: 1;\n          `}\n          key={item.id}\n          icon=\"🎙\"\n          date={prettyDate(item.date)}\n        >\n          {media ? (\n            <MediaCard\n              title={item.topic}\n              media={media}\n              subtitle={\n                <Fragment>\n                  Public speech at <b>{item.title}</b>.<br />\n                  {link}\n                </Fragment>\n              }\n            />\n          ) : (\n            renderMinified(item.title, link)\n          )}\n        </Timeline.Item>\n      )\n    }\n\n    if (item.__typename === 'GraphCMS_Publication') {\n      const title =\n        item.opengraph.ogTitle ?? item.opengraph.twitterTitle ?? item.title\n      const subtitle =\n        item.opengraph.ogDescription ??\n        item.opengraph.twitterDescription ??\n        item.opengraph.description\n      const image =\n        item.opengraph.ogImage ??\n        item.opengraph.twitterImageSrc ??\n        item.opengraph.image\n\n      const link = renderLink(item.link)\n\n      return (\n        <Timeline.Item key={item.id} icon=\"✏️\" date={prettyDate(item.date)}>\n          {title && subtitle && image ? (\n            <MediaCard\n              title={title}\n              subtitle={\n                <Flex flexDirection=\"column\">\n                  {subtitle}\n                  {link}\n                </Flex>\n              }\n              media={renderImage(image, title)}\n            />\n          ) : (\n            renderMinified(title, link)\n          )}\n        </Timeline.Item>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <ScrollToArea id=\"activity\" scrollOffset={-120}>\n      <Typography.Title\n        css={css`\n          margin-bottom: ${theme.spacing.medium};\n        `}\n        variant=\"h2\"\n      >\n        Activity\n      </Typography.Title>\n      <Timeline hideLine={!visitedLinks.has('activity')}>\n        {mediaItems.map(renderItem)}\n      </Timeline>\n    </ScrollToArea>\n  )\n}\n\nexport default Media\n"],"names":["Media","useStaticQuery","publications","conferences","interviews","visitedLinks","useAppContext","mediaItems","sortByDate","renderLink","css","theme","to","underline","renderMinified","variant","renderVideoEmbed","videoEmbed","title","src","renderImage","alt","id","scrollOffset","hideLine","renderItem","item","link","media","key","icon","date","prettyDate","subtitle","videoMedia","image","flexDirection"],"sourceRoot":""}